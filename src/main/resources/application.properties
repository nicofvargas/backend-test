spring.application.name=backend-test
# ===================================================================
# CONFIGURACIÓN DE LA BASE DE DATOS POSTGRESQL
# ===================================================================

# URL de conexión a la base de datos.
# Formato: jdbc:postgresql://<host>:<puerto>/<nombre_de_la_bd>
spring.datasource.url=jdbc:postgresql://localhost:5432/backend-test

# Nombre de usuario y contraseña para la base de datos.
spring.datasource.username=backend_test_user
spring.datasource.password=admin

# Driver de la base de datos.
spring.datasource.driver-class-name=org.postgresql.Driver


# ===================================================================
# CONFIGURACIÓN DE JPA / HIBERNATE
# ===================================================================

# Le dice a Hibernate qué hacer con el esquema de la base de datos al arrancar.
# 'update': actualiza el esquema si hay cambios en las entidades (añade columnas, etc.).
# 'validate': valida que el esquema coincida con las entidades, pero no hace cambios.
# 'create': borra y vuelve a crear el esquema cada vez (útil para pruebas).
# 'none': no hace nada.
spring.jpa.hibernate.ddl-auto=update

# Muestra en la consola las sentencias SQL que Hibernate ejecuta.
# Muy útil para depuración.
spring.jpa.show-sql=true

# Formatea el SQL mostrado en la consola para que sea más legible.
spring.jpa.properties.hibernate.format_sql=true

# Especifica el "dialecto" de SQL que Hibernate debe usar.
# Esto le permite generar SQL optimizado para PostgreSQL.
# spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

spring.jpa.open-in-view=false